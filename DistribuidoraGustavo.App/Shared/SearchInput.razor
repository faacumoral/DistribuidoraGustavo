@using System.Timers;

@code {

    [Inject] IJSRuntime JSRuntime { get; set; }

    public SearchInput()
    {
        timer = new System.Timers.Timer(2000);
        timer.Elapsed += TimerEventWrapper;
        timer.AutoReset = false;
    }

    private System.Timers.Timer timer = default!;

    [Parameter]
    public EventCallback OnSearch { get; set; }

    [Parameter]
    public EventCallback<string> OnValueChanged { get; set; }

    [Parameter]
    public bool Disabled { get; set; } = false;

    [Parameter]
    public string SearchValue { get; set; }

    private string ElementId { get; set; } = Guid.NewGuid().ToString().Replace("-", "");

    protected void TimerEventWrapper(object? sender, ElapsedEventArgs e)
    {
        OnSearch.InvokeAsync();
    }

    protected void WaitAndSearch(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            timer.Stop();
            OnSearch.InvokeAsync();
            return;
        }

        OnValueChanged.InvokeAsync(SearchValue);
        timer.Stop();
        timer.Start();
    }

    public async Task Focus()
    {
        await JSRuntime.InvokeVoidAsync("FocusElement", "txtSearchInput");
    }

}

<input disabled="@Disabled"
       class="form-control"
       @bind="SearchValue"
       @bind:event="oninput" @onkeyup="WaitAndSearch" id="txtSearchInput" />
